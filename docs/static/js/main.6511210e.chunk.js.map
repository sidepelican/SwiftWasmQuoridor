{"version":3,"sources":["Board.tsx","Gen/SwiftRuntime.ts","Gen/CallableKitExports.ts","WasmContext.tsx","GameArea.tsx","App.tsx","index.tsx"],"names":["possibleFences","Array","flatMap","_","i","x","y","o","Board","game","wasm","useState","setCount","step","useCallback","v","board","currentBoard","aiTurn","currentTurn","useEffect","setTimeout","aiNext","cpuPos","aiPawn","point","playerPos","humanPawn","cpuFencesLeft","fencesLeft","playerFencesLeft","cpuWin","winner","playerWin","className","style","position","display","flexDirection","top","left","map","canMove","canMoves","onClick","undefined","movePawn","isPlayer","Math","floor","placed","canPlace","hFences","exists","canPut","vFences","putFence","orientation","right","bottom","Tile","props","Pawn","Fence","MiniFence","Memory","exports","rawMemory","this","memory","Uint8Array","buffer","ptr","bytes","set","SwiftRuntime","_instance","_memory","_nextArgument","_nextReturn","textDecoder","TextDecoder","textEncoder","TextEncoder","instance","Error","callable_kit","receive_arg","writeBytes","write_ret","length","subarray","decode","functionID","argument","argJsonString","JSON","stringify","argBytes","encode","console","debug","argBytesLength","out","ck_send","returnValue","parse","bindCallableKitExports","swift","newGame","callSwiftFunction","_0","_1","command","deleteGame","wasmFs","WasmFs","wasi","WASI","args","env","bindings","wasiBindings","fs","startWasiTask","a","WebAssembly","compileStreaming","fetch","module","instantiate","getImports","callableKitImports","setInstance","start","WasmContext","React","createContext","WasmProvider","setExports","then","children","Provider","value","GameArea","content","useContext","setGame","onReset","justifyContent","alignItems","width","App","marginTop","textAlign","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6511210e.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport './Board.css';\nimport { CallableKitExports, FenceOrientation, GameID } from './Gen/CallableKitExports';\n\nconst possibleFences: { x: number, y: number, o: FenceOrientation }[] =\n  [...Array(8)].flatMap((_, i) => {\n    const x = i + 1;\n    return [...Array(8)].flatMap((_, i) => {\n      const y = i + 1;\n      return [\n        { x: x, y: y, o: \"horizontal\" },\n        { x: x, y: y, o: \"vertical\" },\n      ]\n    });\n  });\n\nexport const Board: React.VFC<{\n  game: GameID,\n  wasm: CallableKitExports,\n}> = ({ game, wasm }) => {\n  const [, setCount] = useState(0);\n  const step = useCallback(() => {\n    setCount(v => v + 1);\n  }, []);\n\n  const board = wasm.currentBoard(game);\n\n  const aiTurn = board.currentTurn === \"ai\";\n  useEffect(() => {\n    if (aiTurn) {\n      setTimeout(() => {\n        wasm.aiNext(game);\n        step();\n      }, 50);\n    }\n  }, [aiTurn, game, step, wasm]);\n\n  const cpuPos = board.aiPawn.point;\n  const playerPos = board.humanPawn.point;\n  const cpuFencesLeft = board.aiPawn.fencesLeft;\n  const playerFencesLeft = board.humanPawn.fencesLeft;\n  const cpuWin = board.winner === \"ai\";\n  const playerWin = board.winner === \"human\";\n\n  return <div className=\"Board\" style={{ position: \"relative\" }}>\n    <div style={{\n      display: \"flex\", flexDirection: \"column\",\n      position: \"absolute\", top: \"65px\", left: \"15px\",\n    }}>\n      {[...Array(9)].map((_, y) =>\n        <div style={{ display: \"flex\", flexDirection: \"row\" }} key={y}>\n          {[...Array(9)].map((_, x) => {\n            const canMove = board.canMoves[x * 9 + y];\n            let onClick = undefined;\n            if (canMove) {\n              onClick = () => { wasm.movePawn(game, { x, y }); step(); };\n            }\n            return <Tile key={x} canMove={canMove} onClick={onClick} />;\n          })}\n        </div>\n      )}\n    </div>\n    <div>\n      <Pawn isPlayer={false} top={cpuPos.y * 50 + 65} left={Math.floor(cpuPos.x) * 50 + 15} />\n      <Pawn isPlayer={true} top={playerPos.y * 50 + 65} left={Math.floor(playerPos.x) * 50 + 15} />\n    </div>\n    <div>\n      {possibleFences.map(({ x, y, o }) => {\n        let placed: boolean;\n        let canPlace: boolean;\n        let top, left: number;\n        switch (o) {\n          case \"horizontal\":\n            placed = board.hFences[(x-1) * 8 + (y-1)].exists;\n            canPlace = board.hFences[(x-1) * 8 + (y-1)].canPut;\n            left = (x - 1) * 50;\n            top = y * 50;\n            break;\n          case \"vertical\":\n            placed = board.vFences[(x-1) * 8 + (y-1)].exists;\n            canPlace = board.vFences[(x-1) * 8 + (y-1)].canPut;\n            left = x * 50 - 10;\n            top = (y - 1) * 50 + 10;\n            break;\n        }\n        top += 60; left += 20;\n        let onClick = undefined;\n        if (canPlace) {\n          onClick = () => { wasm.putFence(game, { x, y, orientation: o}); step(); };\n        }\n        return <Fence key={`${x}_${y}_${o}`} orientation={o} canPlace={canPlace} placed={placed} top={top} left={left} onClick={onClick} />;\n      })}\n    </div>\n    <div>\n      {[...Array(cpuFencesLeft)].map((_, i) => {\n        return <MiniFence key={i} top={10} left={i * 15 + 10} />;\n      })}\n      {[...Array(playerFencesLeft)].map((_, i) => {\n        return <MiniFence key={i} top={540} left={i * 15 + 10} />;\n      })}\n    </div>\n    <div style={{ position: \"absolute\", top: 0, right: 0 }}>\n      {aiTurn && (board.winner == null) ? <p>AI thinking...</p> : null}\n      {!aiTurn && (board.winner == null) ? <p>Your turn</p> : null}\n    </div>\n    <div style={{ position: \"absolute\", bottom: 0, right: 0 }}>\n      {playerWin ? <p>You Win</p> : null}\n      {cpuWin ? <p>You Lose</p> : null}\n    </div>\n  </div>;\n}\n\nconst Tile: React.VFC<{\n  canMove: boolean,\n  onClick?: () => void,\n}> = (props) => {\n  return <div\n    className={\n      \"TileView\"\n      + (props.canMove ? \" canMove\" : \"\")\n    }\n    onClick={props.onClick}\n  />;\n}\n\nconst Pawn: React.VFC<{\n  isPlayer: boolean,\n  top: number, left: number\n}> = (props) => {\n  return <div\n    className={\n      \"PawnView\"\n      + (props.isPlayer ? \" isPlayer\" : \"\")\n    }\n    style={{\n      position: \"absolute\",\n      top: props.top,\n      left: props.left,\n    }} />;\n}\n\nconst Fence: React.VFC<{\n  orientation: FenceOrientation,\n  canPlace: boolean,\n  placed: boolean,\n  onClick?: () => void,\n  top: number, left: number\n}> = (props) => {\n  return <div\n    className={\n      `FenceView ${props.orientation}`\n      + (props.canPlace ? \" canPlace\" : \"\")\n      + (props.placed ? \" placed\" : \"\")\n    }\n    style={{\n      position: \"absolute\",\n      top: props.top,\n      left: props.left,\n    }}\n    onClick={props.onClick}\n  />;\n}\n\nconst MiniFence: React.VFC<{\n  top: number, left: number\n}> = (props) => {\n  return <div\n    className=\"MiniFenceView\"\n    style={{\n      position: \"absolute\",\n      top: props.top,\n      left: props.left,\n    }}\n  />;\n}\n","class Memory {\n  readonly rawMemory: WebAssembly.Memory;\n  constructor(exports: WebAssembly.Exports) {\n      this.rawMemory = exports.memory as WebAssembly.Memory;\n  }\n  bytes(): Uint8Array {\n    return new Uint8Array(this.rawMemory.buffer);\n  }\n  writeBytes(ptr: number, bytes: Uint8Array): void {\n    this.bytes().set(bytes, ptr);\n  }\n}\n\ntype WasmCallableKitExported = {\n  ck_send: (functionID: number, argumentBufferLength: number) => number,\n}\n\nexport class SwiftRuntime {\n  private _instance: WebAssembly.Instance | null = null;\n  private _memory: Memory | null = null;\n\n  private _nextArgument: Uint8Array | null = null;\n  private _nextReturn: string | null = null;\n\n  private textDecoder = new TextDecoder(\"utf-8\");\n  private textEncoder = new TextEncoder();\n\n  setInstance(instance: WebAssembly.Instance) {\n    this._instance = instance;\n  }\n\n  private get instance() {\n    if (!this._instance)\n        throw new Error(\"WebAssembly instance is not set yet\");\n    return this._instance;\n  }\n\n  private get memory() {\n    if (!this._memory) {\n        this._memory = new Memory(this.instance.exports);\n    }\n    return this._memory;\n  }\n\n  get callableKitImports(): WebAssembly.Imports {\n    return {\n      callable_kit: {\n        receive_arg: (buffer: number) => {\n          this.memory.writeBytes(buffer, this._nextArgument!!);\n          this._nextArgument = null;\n        },\n        write_ret: (buffer: number, length: number) => {\n          const bytes = this.memory.bytes().subarray(buffer, buffer + length);\n          this._nextReturn = this.textDecoder.decode(bytes);\n        },\n      }\n    };\n  }\n\n  callSwiftFunction(functionID: number, argument: any): any {\n    const exports = this.instance.exports as WasmCallableKitExported;\n\n    const argJsonString = JSON.stringify(argument) + '\\0';\n    const argBytes = this.textEncoder.encode(argJsonString);\n    console.debug(`call swift function with`, {\n      functionID,\n      argJsonString,\n      argBytesLength: argBytes.length,\n    });\n    this._nextArgument = argBytes;\n    const out = exports.ck_send(functionID, argBytes.length);\n    const returnValue = this._nextReturn!!;\n    this._nextReturn = null;\n\n    switch (out) {\n      case 0:\n        return JSON.parse(returnValue);\n      case 1:\n        throw new Error(returnValue);\n    }\n  }\n}\n","type PartialSwiftRuntime = {\n  callSwiftFunction(functionID: number, argument: any): any\n}\n\nexport type CallableKitExports = {\n  newGame: () => GameID,\n  putFence: (game: GameID, position: FencePoint) => void,\n  movePawn: (game: GameID, command: PawnPoint) => void,\n  aiNext: (game: GameID) => void,\n  currentBoard: (game: GameID) => Board,\n  deleteGame: (game: GameID) => void,\n};\n\nexport const bindCallableKitExports = (swift: PartialSwiftRuntime): CallableKitExports => {\n  return {\n    newGame: (): GameID => swift.callSwiftFunction(0, {\n\n    }),\n    putFence: (game: GameID, position: FencePoint): void => swift.callSwiftFunction(1, {\n      _0: game,\n      _1: position,\n    }),\n    movePawn: (game: GameID, command: PawnPoint): void => swift.callSwiftFunction(2, {\n      _0: game,\n      _1: command,\n    }),\n    aiNext: (game: GameID): void => swift.callSwiftFunction(3, {\n      _0: game,\n    }),\n    currentBoard: (game: GameID): Board => swift.callSwiftFunction(4, {\n      _0: game,\n    }),\n    deleteGame: (game: GameID): void => swift.callSwiftFunction(5, {\n      _0: game,\n    }),\n  };\n};\n\nexport type GameID = {\n    raw: number;\n};\n\nexport type FenceOrientation = \"horizontal\" |\n\"vertical\";\n\nexport type FencePoint = {\n    x: number;\n    y: number;\n    orientation: FenceOrientation;\n};\n\nexport type PawnPoint = {\n    x: number;\n    y: number;\n};\n\nexport type PlayerSide = \"ai\" |\n\"human\";\n\nexport type Pawn = {\n    side: PlayerSide;\n    point: PawnPoint;\n    fencesLeft: number;\n};\n\nexport type FenceInfo = {\n    exists: boolean;\n    canPut: boolean;\n};\n\nexport type Board = {\n    currentTurn: PlayerSide;\n    winner?: PlayerSide;\n    humanPawn: Pawn;\n    aiPawn: Pawn;\n    hFences: FenceInfo[];\n    vFences: FenceInfo[];\n    canMoves: boolean[];\n};","import React, { useContext, useEffect, useState } from \"react\";\nimport { WASI } from \"@wasmer/wasi\";\nimport wasiBindings from \"@wasmer/wasi/lib/bindings/browser\";\nimport { WasmFs } from \"@wasmer/wasmfs\";\nimport { SwiftRuntime } from \"./Gen/SwiftRuntime\";\nimport { bindCallableKitExports, CallableKitExports } from \"./Gen/CallableKitExports\";\n\n// Instantiate a new WASI Instance\nconst wasmFs = new WasmFs();\nlet wasi = new WASI({\n  args: [],\n  env: {},\n  bindings: {\n    ...wasiBindings,\n    fs: wasmFs.fs\n  }\n});\n\nconst startWasiTask = async () => {\n  const swift = new SwiftRuntime();\n\n  // Fetch our Wasm File\n  let module = await WebAssembly.compileStreaming(fetch(\"./WasmLib.wasm\"));\n  let instance = await WebAssembly.instantiate(module, {\n    ...wasi.getImports(module),\n    ...swift.callableKitImports,\n  });\n  swift.setInstance(instance);\n  wasi.start(instance);\n  \n  // const logStdout = (async () => {\n  //   const stdout = await wasmFs.getStdOut();\n  //   console.log(stdout);\n  // });\n  // setInterval(logStdout, 300);\n\n  return bindCallableKitExports(swift);\n};\n\nconst WasmContext = React.createContext<CallableKitExports | null>(null);\n\nexport const WasmProvider: React.FC<{}> = (props) => {\n  const [exports, setExports] = useState<CallableKitExports>();\n  useEffect(() => {\n    startWasiTask().then(setExports);\n  }, []);\n\n  if (exports == null) {\n    return <>{props.children}</>;\n  }\n\n  return <WasmContext.Provider value={exports}>\n    {props.children}\n  </WasmContext.Provider>;\n};\n\nexport const useWasmExports = (): CallableKitExports | null => {\n  return useContext(WasmContext);\n}\n","import { ReactNode, useCallback, useEffect, useState } from \"react\";\nimport { Board } from \"./Board\";\nimport { GameID } from \"./Gen/CallableKitExports\";\nimport { useWasmExports } from \"./WasmContext\";\n\nexport const GameArea: React.VFC<{}> = () => {\n  const wasm = useWasmExports();\n  const [game, setGame] = useState<GameID | undefined>(undefined);\n  const onReset = useCallback(() => {\n    if (game != null && wasm != null) {\n      wasm.deleteGame(game);\n      setGame(undefined);\n    }\n  }, [game, wasm]);\n\n  useEffect(() => {\n    if (game == null && wasm != null) {\n      setGame(wasm.newGame());\n    }\n  }, [game, wasm]);\n\n  let content: ReactNode;\n  if (wasm == null) {\n    content = <div className=\"Board\" style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\n      <p>Loading <code>.wasm</code> binary ...</p>\n    </div>\n  } else if (game == null) {\n    content = <div className=\"Board\" style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\n      <p>Starting game ...</p>\n    </div>\n  } else {\n    content = <Board game={game} wasm={wasm} />\n  }\n\n  return <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"flex-end\" }}>\n    {content}\n    <button style={{ width: \"fit-content\" }} onClick={onReset}>\n      Reset\n    </button>\n  </div>\n}\n","import React from 'react';\nimport './App.css';\nimport { GameArea } from './GameArea';\nexport const App: React.VFC<{}> = () => {\n  return <div className=\"App\">\n    <h1>\n      <code>Swift Quoridor!</code>\n    </h1>\n    <GameArea/>\n    <div className=\"Description\">\n      <h2>Quoridor（コリドール）</h2>\n      <p>\n        ターン制のボードゲームで、自分のコマを相手の陣地（一番上または一番下の行）に到達させると勝利です。\n        ターンプレイヤーは以下のどちらかを行えます。\n      </p>\n      <ul>\n        <li>コマを前後左右1マスに動かす。移動先に相手のコマがある場合は、飛び越えることができる。</li>\n        <li>板を1枚設置する。板はコマの通行を妨害する。コマがゴールできなくなるように板を設置することはできない。</li>\n      </ul>\n      <h2>これは何？</h2>\n      <p>\n        Swiftで作ったコリドールのゲームエンジンをWasmビルドしてブラウザで動くようにしたものです。\n      </p>\n      <p>\n        UIはJSです。Swiftではゲームエンジン部分とAIが動いてます。\n      </p>\n      <hr style={{ marginTop: \"3rem\" }} />\n      <div style={{ textAlign: \"end\" }}>\n        Twitter:\n        <a\n          className=\"TwitterLink\"\n          href=\"https://twitter.com/iceman5499\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          @iceman5499\n        </a>\n      </div>\n    </div>\n  </div>;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport { WasmProvider } from './WasmContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WasmProvider>\n      <App />\n    </WasmProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}